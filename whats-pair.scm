;;(define (cons x y)
;;  (define (dispatch m)
;;    (cond ((= m 0) x)
;;          ((= m 1) y)
;;          (else (error "Argument not 0 or 1 -- CONS" m))))
;;  dispatch)
;;(define (car z) (z 0))
;;(define (cdr z) (z 1))

;;(define (cons x y)
;;  (lambda (m) (m x y)))
;;(define (car z)
;;  (z (lambda (p q) p)))
;;(define (cdr z)
;;  (z (lambda (p q) q)))

;; a and b are nonnegative integers
(define (cons a b)
  (cond ((negative? a) (error "negtive input " a))
        ((negative? b) (error "negtive input " b))
        (else (* (expt 2 a) (expt 3 b)))))

(define (car x)
  (define (iter j x)
    (if (zero? (remainder x 2))
      (iter (+ j 1) (quotient x 2))
      j))
  (iter 0 x))

(define (cdr x)
  (define (iter j x)
    (if (zero? (remainder x 3))
      (iter (+ j 1) (quotient x 3))
      j))
  (iter 0 x))
