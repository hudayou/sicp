(use-modules (ice-9 streams))

(define (stream-ref s n)
  (if (= n 0)
    (stream-car s)
    (stream-ref (stream-cdr s) (- n 1))))
(define (stream-display s)
  (stream-for-each display-line s))
(define (display-line x)
  (display x)
  (newline))
(define (stream-enumerate-interval low high)
  (make-stream (lambda (state)
                 (if (> state high)
                   '()
                   (cons state
                         (+ state 1))))
               low))
(define (stream-filter pred stream)
  (make-stream (lambda (state)
                 (if (stream-null? state)
                   '()
                   (if (pred (stream-car state))
                     (cons (stream-car state) (stream-cdr state))
                     (if (stream-null? (stream-cdr state))
                       '()
                       (cons (stream-car (stream-cdr state))
                             (stream-cdr (stream-cdr state)))))))
               stream))
(define integers
  (make-stream (lambda (state) (cons state (+ state 1)))
               1))
(define (divisible? x y) (= (remainder x y) 0))
(define no-sevens
  (stream-filter (lambda (x) (not (divisible? x 7)))
                 integers))
(define fibs
  (make-stream (lambda (state)
                 (cons (car state)
                       (cons (cdr state)
                             (+ (car state)
                                (cdr state)))))
               (cons 0 1)))
